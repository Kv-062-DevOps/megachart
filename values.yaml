tags:
  monitoring: false
  iam: false

image:
  repository: 074368059797.dkr.ecr.eu-central-1.amazonaws.com/front
  tag: latest
  imagePullSecrets: awsecr-cred

service:
  type: LoadBalancer
  port: 8080
  targetPort: 8080

URL_GET: get-srv:8081
URL_POST: post-srv:8082/a

registry-creds:
  enabled: false

global:
  kiam_server: arn:aws:iam::520795059397:role/kiam_server
  kiam_agent_ecr: arn:aws:iam::520795059397:role/kiam_agent_ecr
  kiam_agent_dynamodb: arn:aws:iam::520795059397:role/kiam_agent_dynamodb

##### PROMETHEUS #####
prometheus:

  alertmanager:
    enabled: false
    persistentVolume:
      enabled: false

  server:
    global:
      scrape_interval: 30s
      scrape_timeout: 30s
      evaluation_interval: 1m
    persistentVolume:
      enabled: false

  pushgateway:
    enabled: false
    persistentVolume:
      enabled: false

  extraScrapeConfigs:

##### Grafana #####
grafana:

  #Values.namespaceOverride:

  persistence:
      enabled: false

  adminUser: admin
  adminPassdword:

  datasources:
      datasources.yaml:
          apiVersion: 1
          datasources:
          - name: Prometheus
            type: prometheus
            url: "http://{{ .Release.Name }}-prometheus-server"
            access: proxy
            isDefault: true

  dashboardProviders:
      dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
    
  dashboards:
    default:
      Demo-Dashboard:
        json:

# ##### KIAM #####
kiam:

  imagePullSecrets: awsecr-cred

  agent:
    name: kiam-agent
    host:
      iptables: true
      # do not remove iptables forwarding rules when kiam-agent terminates
      # needed for RollingUpdate strategy and for security reeasons
      # see https://github.com/uswitch/kiam/issues/202 and https://github.com/uswitch/kiam/pull/253
      iptablesRemoveOnShutdown: false
      port: 8181
      interface: cbr0

    updateStrategy: RollingUpdate

    nodeSelector:
      kubernetes.io/role: node

    tlsSecret: kiam-ca-key-pair


  server:

    name: kiam-server

    podAnnotations: {}
    ## Labels to be added to pods
    ##
    podLabels: {}
    ## Annotations to be added to service
    ##
    serviceAnnotations: {}
    ## Labels to be added to service
    ##
    serviceLabels: {}
    ## Used to assign priority to server pods
    ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    ##
    priorityClassName: ""
    ## Strategy for DaemonSet updates (requires Kubernetes 1.6+)
    ## Ref: https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/
    ##
    updateStrategy: RollingUpdate

    # Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#affinity-v1-core
    # Expects input structure as per specification for example:
    #   affinity:
    #     nodeAffinity:
    #      requiredDuringSchedulingIgnoredDuringExecution:
    #        nodeSelectorTerms:
    #        - matchExpressions:
    #          - key: foo.bar.com/role
    #            operator: In
    #            values:
    #            - master
    affinity: {}

    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}
      # kubernetes.io/role: master
    ## Pod tolerations
    ## Ref https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## Server container resources
    ## Ref https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ##
    resources: {}
    ## Additional container arguments
    ##
    extraArgs: {}
    ## Additional container environment variables
    ##

    # - name: VARNAME1
    #   value: value1
    # - name: VARNAME2
    #   valueFrom:
    #     secretKeyRef:
    #       name: existing-secret
    #       key: varname2-key
    extraEnv: []

    # Location of SSL certs on host
    ## Running on Amazon Linux or RHEL distros:
    #   /etc/pki/ca-trust/extracted/pem
    ## else:
    #   /usr/share/ca-certificates
    sslCertHostPath: /usr/share/ca-certificates

    ## Additional container hostPath mounts
    ##
    extraHostPathMounts: []

    ## Server initContainers
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    ##
    initContainers: []

    service:
      port: 443
      targetPort: 443


    ## Server probe configuration
    probes:
      serverAddress: localhost

    ## Base64-encoded PEM values for server's CA certificate(s), certificate and private key
    ##
    tlsFiles:
      ca:
      cert:
      key:

    ## Secret name of server's TLS certificates
    ##
    tlsSecret: kiam-ca-key-pair

    ## Base ARN for IAM roles
    ## If not specified use EC2 metadata service to detect ARN prefix
    ##
    roleBaseArn: null
    ## IAM role for the server to assume
    ##
    assumeRoleArn: kiam_server
    ## Session duration for STS tokens
    ##
    sessionDuration: 15m
    ## Use hostNetwork for server
    ## Set this to true when running the servers on the same nodes as the agents
    useHostNetwork: false

    ## Agent TLS Certificate filenames
    tlsCerts:
      certFileName: cert
      keyFileName: key
      caFileName: ca

##### cert-manager #####
cert-manager:
  installCRDs: true